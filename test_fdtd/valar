#!/usr/bin/ipython3
# coding:utf-8
'''
TFG Acoustics Simulations

Main program launcher

@author: ElÃ­as Gabriel Ferrer Jorge
'''

import sys
import os
import importlib
import numpy as np


#import fdtd.gui     as gu
#import fdtd.room    as ro
#import fdtd.source  as so
#import fdtd.sim     as si
#import fdtd.show    as sh
#import fdtd.ploti  as pl

modules = [['fdtd.room'],\
		['fdtd.medium'],
		['fdtd.source'],
		['fdtd.sim'],
		['fdtd.show'],
		['fdtd.datafiles'],
		['fdtd.gui_window'],
		['fdtd.counter'],
		['fdtd.microphone']
		]

for i in modules:
	if i[0] in sys.modules:
		i[0] = importlib.reload(sys.modules[i[0]])
	else:
		i[0] = importlib.import_module(i[0])

ro    = modules[0][0]
me    = modules[1][0]
sr    = modules[2][0]
si    = modules[3][0]
sh    = modules[4][0]
fl    = modules[5][0]
gui   = modules[6][0]
count = modules[7][0]
mc    = modules[8][0]

#
def run_sim(sim):
	'''
	'''

	for cadat in np.arange(0,sim.t,sim.dt):
		sim.cadat = cadat
		sim.calc(sim.cadat)
	sim.counter.cont=0


#Gui
#gui.launch()
#def execute():
f = open('log.txt','wt')

# TEST
# 1-----------------------------------------

# Room parameters
dims = [1,1,1]   # [m]
dres = 0.05
pini = [0,0,0]

# Medium parameters
# medium_name = 'cosa inventada'
# c0 = 1.
# cr0 = 1.
# r0h = 1.

# Define Source parameters !!NOT USED NOW!!
source_label = 'Secondary Source'
sample_rate  = 44100 # Sample rate [samples/s]
t_0          = 1.0
duration_src = 1.0  # Duration of Source's tone [s]
frec_src     = 10000.0    # Frequency of Source [Hertz]
phase_src    = 0.0     # Phase angle of Source's tone [rad]
coords_src   = [0.5,0.5,0.5] # Coordinates of position [m]



# Intialize Simulation environment
sim_time = 5.


# Input Source in Simulation environment
rom  = ro.Room(dims,dres,pini)
med = me.Medium(rom)

src1 = sr.Source(t0 = t_0)#Create Main Source
src1.create_v_in_t()

src2 = sr.Source(frequency=10)
src2.create_v_in_t()
sources = [src1]


mic1 = mc.Microphone()
mic2 = mc.Microphone(coords=[0.5,0.5,0.5])
mics = [mic1,mic2]

sim  = si.Sim(rom,med,sources,mics,sim_time)

#Ajust samples in sources with sim parameters and
for i in sources:
	i.retone(sim.t,sim.dt)
sim.init_sources(sources)



if (sim.status==sim.SIM_NO_ERR):
	f.write("Simulation OK\n")
	print("Simulation OK")
	f.write(sim.__str__())
	f.close()
	fl.save_number('steps',int(sim.t/sim.dt))
	print(sim)
else:
	f.write('Simulation impossible due to aliasing!!!!\n' + sim.__str__() + '\n' + 'ABORTED\n')
	f.close()
	raise ValueError('Simulation impossible due to aliasing \nSource Frequency:%s -> Max Frequency allowed: %s \n' %(sim.sources[sim.source_index].frequency,sim.frequency_min_antialising))

#Execute simulation

run_sim(sim)


def obtain_impulse_response(A_coords, B_coords, time=sim_time, room=rom,medium=med):
	'''Obtain impulse response function between two points, from A to B,
		inside a closed space
	'''
	s = sr.Source(coords_0 = A_coords)
	source = [s]
	m = mc.Microphone(coords= B_coords)
	microphone = [m]
	sim = si.Sim(room, medium, source, microphone,time)
	source[0].retone(sim.t,sim.dt)
	source[0].d_dirac(sim.dt)
	sim.init_sources(source)
	run_sim(sim)
	return microphone[0].data


# Input Microphone in simulation environment


#4-------------------------------------------
#Obtain data of microphones without run simulation again
#micro = mc.Microphone(sim.t,1./sim.dt)
#print(micro.__str__())
#f.close()



# class mywindow(QtWidgets.QMainWindow):
#
# 	def __init__(self):
#
# 		super(mywindow, self).__init__()
# 		self.ui = Ui_MainWindow()
# 		self.ui.setupUi(self)
#
# app = QtWidgets.QApplication([])
#
# application = mywindow()
#
# application.show()
#
# sys.exit(app.exec())

# class App(QMainWindow):
#
#     def __init__(self):
#         super().__init__()
#         self.left = 10
#         self.top = 10
#         self.title = 'PyQt5 matplotlib example - pythonspot.com'
#         self.width = 640
#         self.height = 400
#         self.initUI()
#
#     def initUI(self):
#         self.setWindowTitle(self.title)
#         self.setGeometry(self.left, self.top, self.width, self.height)
#
#         m = PlotCanvas(self, width=5, height=4)
#         m.move(0,0)
#
#         button = QPushButton('PyQt5 button', self)
#         button.setToolTip('This s an example button')
#         button.move(500,0)
#         button.resize(140,100)
#
#         self.show()
#
#
# class PlotCanvas(FigureCanvas):
#
#     def __init__(self, parent=None, width=5, height=4, dpi=100):
#         fig = Figure(figsize=(width, height), dpi=dpi)
#         self.axes = fig.add_subplot(111)
#
#         FigureCanvas.__init__(self, fig)
#         self.setParent(parent)
#
#         FigureCanvas.setSizePolicy(self,
#                 QSizePolicy.Expanding,
#                 QSizePolicy.Expanding)
#         FigureCanvas.updateGeometry(self)
#         #self.plot()
#
#
#     def plot(self):
#         data = [random.random() for i in range(25)]
#         ax = self.figure.add_subplot(111)
#         ax.plot(data, 'r-')
#         ax.set_title('PyQt Matplotlib Example')
#         self.draw()
#
# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     ex = App()
#     sys.exit(app.exec_())
#     if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
#         QtGui.QApplication.instance().exec_()
